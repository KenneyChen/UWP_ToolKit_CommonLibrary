//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace UWPToolkit
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace UWPToolkit.UWPToolkit_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[34];
            _typeNameTable[0] = "CommonLibrary.CropImageControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Windows.Storage.StorageFile";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "CommonLibrary.CropSelection";
            _typeNameTable[5] = "CommonLibrary.AspectRatio";
            _typeNameTable[6] = "System.Enum";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "CommonLibrary.CropSelectionSize";
            _typeNameTable[9] = "Int32";
            _typeNameTable[10] = "Boolean";
            _typeNameTable[11] = "Windows.Foundation.Rect";
            _typeNameTable[12] = "System.EventHandler";
            _typeNameTable[13] = "System.MulticastDelegate";
            _typeNameTable[14] = "System.Delegate";
            _typeNameTable[15] = "UWPToolkit.Controls.PictureCropControl";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[17] = "Microsoft.Labs.InkToolbarControl.InkToolbar";
            _typeNameTable[18] = "Windows.UI.Color";
            _typeNameTable[19] = "Double";
            _typeNameTable[20] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[21] = "Windows.UI.Xaml.Controls.InkCanvas";
            _typeNameTable[22] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[23] = "Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind";
            _typeNameTable[24] = "Windows.UI.Input.Inking.PenTipShape";
            _typeNameTable[25] = "Windows.Foundation.Size";
            _typeNameTable[26] = "Microsoft.Labs.InkToolbarControl.InkToolbarTool";
            _typeNameTable[27] = "UWPToolkit.Controls.PictureEditor";
            _typeNameTable[28] = "UWPToolkit.Controls.PreviewPictureControl";
            _typeNameTable[29] = "UWPToolkit.Pages.PreviewPicturePage";
            _typeNameTable[30] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[31] = "Byte";
            _typeNameTable[32] = "UWPToolkit.MainPage";
            _typeNameTable[33] = "UWPToolkit.Pages.PictureEditorPage";

            _typeTable = new global::System.Type[34];
            _typeTable[0] = typeof(global::CommonLibrary.CropImageControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::CommonLibrary.CropSelection);
            _typeTable[5] = typeof(global::CommonLibrary.AspectRatio);
            _typeTable[6] = typeof(global::System.Enum);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::CommonLibrary.CropSelectionSize);
            _typeTable[9] = typeof(global::System.Int32);
            _typeTable[10] = typeof(global::System.Boolean);
            _typeTable[11] = typeof(global::Windows.Foundation.Rect);
            _typeTable[12] = typeof(global::System.EventHandler);
            _typeTable[13] = typeof(global::System.MulticastDelegate);
            _typeTable[14] = typeof(global::System.Delegate);
            _typeTable[15] = typeof(global::UWPToolkit.Controls.PictureCropControl);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[17] = typeof(global::Microsoft.Labs.InkToolbarControl.InkToolbar);
            _typeTable[18] = typeof(global::Windows.UI.Color);
            _typeTable[19] = typeof(global::System.Double);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[21] = typeof(global::Windows.UI.Xaml.Controls.InkCanvas);
            _typeTable[22] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[23] = typeof(global::Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind);
            _typeTable[24] = typeof(global::Windows.UI.Input.Inking.PenTipShape);
            _typeTable[25] = typeof(global::Windows.Foundation.Size);
            _typeTable[26] = typeof(global::Microsoft.Labs.InkToolbarControl.InkToolbarTool);
            _typeTable[27] = typeof(global::UWPToolkit.Controls.PictureEditor);
            _typeTable[28] = typeof(global::UWPToolkit.Controls.PreviewPictureControl);
            _typeTable[29] = typeof(global::UWPToolkit.Pages.PreviewPicturePage);
            _typeTable[30] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[31] = typeof(global::System.Byte);
            _typeTable[32] = typeof(global::UWPToolkit.MainPage);
            _typeTable[33] = typeof(global::UWPToolkit.Pages.PictureEditorPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_CropImageControl() { return new global::CommonLibrary.CropImageControl(); }
        private object Activate_4_CropSelection() { return new global::CommonLibrary.CropSelection(); }
        private object Activate_15_PictureCropControl() { return new global::UWPToolkit.Controls.PictureCropControl(); }
        private object Activate_17_InkToolbar() { return new global::Microsoft.Labs.InkToolbarControl.InkToolbar(); }
        private object Activate_29_PreviewPicturePage() { return new global::UWPToolkit.Pages.PreviewPicturePage(); }
        private object Activate_32_MainPage() { return new global::UWPToolkit.MainPage(); }
        private object Activate_33_PictureEditorPage() { return new global::UWPToolkit.Pages.PictureEditorPage(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  CommonLibrary.CropImageControl
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_CropImageControl;
                userType.AddMemberName("SourceImageFile");
                userType.AddMemberName("CropSelection");
                userType.AddMemberName("CropAspectRatio");
                userType.AddMemberName("DefaultCropSelectionSize");
                userType.AddMemberName("imgWidth");
                userType.AddMemberName("imgHeight");
                userType.AddMemberName("isSelectChanged");
                userType.AddMemberName("realSelectedRect");
                userType.AddMemberName("OverrideReSetSelectionRect");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.Storage.StorageFile
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  CommonLibrary.CropSelection
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  CommonLibrary.AspectRatio
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Custom", global::CommonLibrary.AspectRatio.Custom);
                userType.AddEnumValue("Square", global::CommonLibrary.AspectRatio.Square);
                xamlType = userType;
                break;

            case 6:   //  System.Enum
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  CommonLibrary.CropSelectionSize
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Full", global::CommonLibrary.CropSelectionSize.Full);
                userType.AddEnumValue("Half", global::CommonLibrary.CropSelectionSize.Half);
                userType.AddEnumValue("OneFourth", global::CommonLibrary.CropSelectionSize.OneFourth);
                xamlType = userType;
                break;

            case 9:   //  Int32
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Boolean
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Windows.Foundation.Rect
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  System.EventHandler
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.MulticastDelegate"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  System.MulticastDelegate
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case 14:   //  System.Delegate
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 15:   //  UWPToolkit.Controls.PictureCropControl
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_PictureCropControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.Labs.InkToolbarControl.InkToolbar
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_17_InkToolbar;
                userType.AddMemberName("PenColor");
                userType.AddMemberName("ButtonHeight");
                userType.AddMemberName("ButtonWidth");
                userType.AddMemberName("ButtonBackground");
                userType.AddMemberName("PressedButtonBackground");
                userType.AddMemberName("PointerOverButtonBackground");
                userType.AddMemberName("SelectedButtonBackground");
                userType.AddMemberName("TargetInkCanvas");
                userType.AddMemberName("HighlighterVisibility");
                userType.AddMemberName("EraserKind");
                userType.AddMemberName("HighlighterPenTipShape");
                userType.AddMemberName("HighlighterSize");
                userType.AddMemberName("HighlighterColor");
                userType.AddMemberName("PenSize");
                userType.AddMemberName("PressedButtonForeground");
                userType.AddMemberName("PointerOverButtonForeground");
                userType.AddMemberName("SelectedButtonForeground");
                userType.AddMemberName("ButtonIconFill");
                userType.AddMemberName("ButtonForeground");
                userType.AddMemberName("ActiveTool");
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Color
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 19:   //  Double
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Windows.UI.Xaml.Controls.InkCanvas
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind.None);
                userType.AddEnumValue("Stroke", global::Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind.Stroke);
                xamlType = userType;
                break;

            case 24:   //  Windows.UI.Input.Inking.PenTipShape
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Circle", global::Windows.UI.Input.Inking.PenTipShape.Circle);
                userType.AddEnumValue("Rectangle", global::Windows.UI.Input.Inking.PenTipShape.Rectangle);
                xamlType = userType;
                break;

            case 25:   //  Windows.Foundation.Size
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Microsoft.Labs.InkToolbarControl.InkToolbarTool
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Microsoft.Labs.InkToolbarControl.InkToolbarTool.None);
                userType.AddEnumValue("Pen", global::Microsoft.Labs.InkToolbarControl.InkToolbarTool.Pen);
                userType.AddEnumValue("Highlighter", global::Microsoft.Labs.InkToolbarControl.InkToolbarTool.Highlighter);
                userType.AddEnumValue("Eraser", global::Microsoft.Labs.InkToolbarControl.InkToolbarTool.Eraser);
                xamlType = userType;
                break;

            case 27:   //  UWPToolkit.Controls.PictureEditor
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  UWPToolkit.Controls.PreviewPictureControl
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  UWPToolkit.Pages.PreviewPicturePage
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_PreviewPicturePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Byte
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  UWPToolkit.MainPage
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  UWPToolkit.Pages.PictureEditorPage
                userType = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_PictureEditorPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.Labs.InkToolbarControl.InkToolbar_UAP_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommonLibrary.CommonLibrary_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_CropImageControl_SourceImageFile(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.SourceImageFile;
        }
        private void set_0_CropImageControl_SourceImageFile(object instance, object Value)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            that.SourceImageFile = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_1_CropImageControl_CropSelection(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.CropSelection;
        }
        private object get_2_CropImageControl_CropAspectRatio(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.CropAspectRatio;
        }
        private void set_2_CropImageControl_CropAspectRatio(object instance, object Value)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            that.CropAspectRatio = (global::CommonLibrary.AspectRatio)Value;
        }
        private object get_3_CropImageControl_DefaultCropSelectionSize(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.DefaultCropSelectionSize;
        }
        private void set_3_CropImageControl_DefaultCropSelectionSize(object instance, object Value)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            that.DefaultCropSelectionSize = (global::CommonLibrary.CropSelectionSize)Value;
        }
        private object get_4_CropImageControl_imgWidth(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.imgWidth;
        }
        private object get_5_CropImageControl_imgHeight(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.imgHeight;
        }
        private object get_6_CropImageControl_isSelectChanged(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.isSelectChanged;
        }
        private object get_7_CropImageControl_realSelectedRect(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.realSelectedRect;
        }
        private object get_8_CropImageControl_OverrideReSetSelectionRect(object instance)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            return that.OverrideReSetSelectionRect;
        }
        private void set_8_CropImageControl_OverrideReSetSelectionRect(object instance, object Value)
        {
            var that = (global::CommonLibrary.CropImageControl)instance;
            that.OverrideReSetSelectionRect = (global::System.EventHandler)Value;
        }
        private object get_9_InkToolbar_PenColor(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.PenColor;
        }
        private void set_9_InkToolbar_PenColor(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.PenColor = (global::Windows.UI.Color)Value;
        }
        private object get_10_InkToolbar_ButtonHeight(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.ButtonHeight;
        }
        private void set_10_InkToolbar_ButtonHeight(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.ButtonHeight = (global::System.Double)Value;
        }
        private object get_11_InkToolbar_ButtonWidth(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.ButtonWidth;
        }
        private void set_11_InkToolbar_ButtonWidth(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.ButtonWidth = (global::System.Double)Value;
        }
        private object get_12_InkToolbar_ButtonBackground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.ButtonBackground;
        }
        private void set_12_InkToolbar_ButtonBackground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.ButtonBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_13_InkToolbar_PressedButtonBackground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.PressedButtonBackground;
        }
        private void set_13_InkToolbar_PressedButtonBackground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.PressedButtonBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_14_InkToolbar_PointerOverButtonBackground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.PointerOverButtonBackground;
        }
        private void set_14_InkToolbar_PointerOverButtonBackground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.PointerOverButtonBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_15_InkToolbar_SelectedButtonBackground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.SelectedButtonBackground;
        }
        private void set_15_InkToolbar_SelectedButtonBackground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.SelectedButtonBackground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_16_InkToolbar_TargetInkCanvas(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.TargetInkCanvas;
        }
        private void set_16_InkToolbar_TargetInkCanvas(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.TargetInkCanvas = (global::Windows.UI.Xaml.Controls.InkCanvas)Value;
        }
        private object get_17_InkToolbar_HighlighterVisibility(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.HighlighterVisibility;
        }
        private void set_17_InkToolbar_HighlighterVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.HighlighterVisibility = (global::Windows.UI.Xaml.Visibility)Value;
        }
        private object get_18_InkToolbar_EraserKind(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.EraserKind;
        }
        private void set_18_InkToolbar_EraserKind(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.EraserKind = (global::Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind)Value;
        }
        private object get_19_InkToolbar_HighlighterPenTipShape(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.HighlighterPenTipShape;
        }
        private void set_19_InkToolbar_HighlighterPenTipShape(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.HighlighterPenTipShape = (global::Windows.UI.Input.Inking.PenTipShape)Value;
        }
        private object get_20_InkToolbar_HighlighterSize(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.HighlighterSize;
        }
        private void set_20_InkToolbar_HighlighterSize(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.HighlighterSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_21_InkToolbar_HighlighterColor(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.HighlighterColor;
        }
        private void set_21_InkToolbar_HighlighterColor(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.HighlighterColor = (global::Windows.UI.Color)Value;
        }
        private object get_22_InkToolbar_PenSize(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.PenSize;
        }
        private void set_22_InkToolbar_PenSize(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.PenSize = (global::Windows.Foundation.Size)Value;
        }
        private object get_23_InkToolbar_PressedButtonForeground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.PressedButtonForeground;
        }
        private void set_23_InkToolbar_PressedButtonForeground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.PressedButtonForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_24_InkToolbar_PointerOverButtonForeground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.PointerOverButtonForeground;
        }
        private void set_24_InkToolbar_PointerOverButtonForeground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.PointerOverButtonForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_25_InkToolbar_SelectedButtonForeground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.SelectedButtonForeground;
        }
        private void set_25_InkToolbar_SelectedButtonForeground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.SelectedButtonForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_26_InkToolbar_ButtonIconFill(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.ButtonIconFill;
        }
        private void set_26_InkToolbar_ButtonIconFill(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.ButtonIconFill = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_27_InkToolbar_ButtonForeground(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.ButtonForeground;
        }
        private void set_27_InkToolbar_ButtonForeground(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.ButtonForeground = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_28_InkToolbar_ActiveTool(object instance)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            return that.ActiveTool;
        }
        private void set_28_InkToolbar_ActiveTool(object instance, object Value)
        {
            var that = (global::Microsoft.Labs.InkToolbarControl.InkToolbar)instance;
            that.ActiveTool = (global::Microsoft.Labs.InkToolbarControl.InkToolbarTool)Value;
        }
        private object get_29_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_29_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_30_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_30_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_31_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_31_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_32_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_32_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember xamlMember = null;
            global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "CommonLibrary.CropImageControl.SourceImageFile":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "SourceImageFile", "Windows.Storage.StorageFile");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_CropImageControl_SourceImageFile;
                xamlMember.Setter = set_0_CropImageControl_SourceImageFile;
                break;
            case "CommonLibrary.CropImageControl.CropSelection":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "CropSelection", "CommonLibrary.CropSelection");
                xamlMember.Getter = get_1_CropImageControl_CropSelection;
                xamlMember.SetIsReadOnly();
                break;
            case "CommonLibrary.CropImageControl.CropAspectRatio":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "CropAspectRatio", "CommonLibrary.AspectRatio");
                xamlMember.Getter = get_2_CropImageControl_CropAspectRatio;
                xamlMember.Setter = set_2_CropImageControl_CropAspectRatio;
                break;
            case "CommonLibrary.CropImageControl.DefaultCropSelectionSize":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "DefaultCropSelectionSize", "CommonLibrary.CropSelectionSize");
                xamlMember.Getter = get_3_CropImageControl_DefaultCropSelectionSize;
                xamlMember.Setter = set_3_CropImageControl_DefaultCropSelectionSize;
                break;
            case "CommonLibrary.CropImageControl.imgWidth":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "imgWidth", "Int32");
                xamlMember.Getter = get_4_CropImageControl_imgWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "CommonLibrary.CropImageControl.imgHeight":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "imgHeight", "Int32");
                xamlMember.Getter = get_5_CropImageControl_imgHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "CommonLibrary.CropImageControl.isSelectChanged":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "isSelectChanged", "Boolean");
                xamlMember.Getter = get_6_CropImageControl_isSelectChanged;
                xamlMember.SetIsReadOnly();
                break;
            case "CommonLibrary.CropImageControl.realSelectedRect":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "realSelectedRect", "Windows.Foundation.Rect");
                xamlMember.Getter = get_7_CropImageControl_realSelectedRect;
                xamlMember.SetIsReadOnly();
                break;
            case "CommonLibrary.CropImageControl.OverrideReSetSelectionRect":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommonLibrary.CropImageControl");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "OverrideReSetSelectionRect", "System.EventHandler");
                xamlMember.Getter = get_8_CropImageControl_OverrideReSetSelectionRect;
                xamlMember.Setter = set_8_CropImageControl_OverrideReSetSelectionRect;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.PenColor":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "PenColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_InkToolbar_PenColor;
                xamlMember.Setter = set_9_InkToolbar_PenColor;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.ButtonHeight":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "ButtonHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_InkToolbar_ButtonHeight;
                xamlMember.Setter = set_10_InkToolbar_ButtonHeight;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.ButtonWidth":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "ButtonWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_InkToolbar_ButtonWidth;
                xamlMember.Setter = set_11_InkToolbar_ButtonWidth;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.ButtonBackground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "ButtonBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_InkToolbar_ButtonBackground;
                xamlMember.Setter = set_12_InkToolbar_ButtonBackground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.PressedButtonBackground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "PressedButtonBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_InkToolbar_PressedButtonBackground;
                xamlMember.Setter = set_13_InkToolbar_PressedButtonBackground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.PointerOverButtonBackground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "PointerOverButtonBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_InkToolbar_PointerOverButtonBackground;
                xamlMember.Setter = set_14_InkToolbar_PointerOverButtonBackground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.SelectedButtonBackground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "SelectedButtonBackground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_InkToolbar_SelectedButtonBackground;
                xamlMember.Setter = set_15_InkToolbar_SelectedButtonBackground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.TargetInkCanvas":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "TargetInkCanvas", "Windows.UI.Xaml.Controls.InkCanvas");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_InkToolbar_TargetInkCanvas;
                xamlMember.Setter = set_16_InkToolbar_TargetInkCanvas;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.HighlighterVisibility":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "HighlighterVisibility", "Windows.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_InkToolbar_HighlighterVisibility;
                xamlMember.Setter = set_17_InkToolbar_HighlighterVisibility;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.EraserKind":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "EraserKind", "Microsoft.Labs.InkToolbarControl.InkToolbarEraserKind");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_InkToolbar_EraserKind;
                xamlMember.Setter = set_18_InkToolbar_EraserKind;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.HighlighterPenTipShape":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "HighlighterPenTipShape", "Windows.UI.Input.Inking.PenTipShape");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_InkToolbar_HighlighterPenTipShape;
                xamlMember.Setter = set_19_InkToolbar_HighlighterPenTipShape;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.HighlighterSize":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "HighlighterSize", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_InkToolbar_HighlighterSize;
                xamlMember.Setter = set_20_InkToolbar_HighlighterSize;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.HighlighterColor":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "HighlighterColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_InkToolbar_HighlighterColor;
                xamlMember.Setter = set_21_InkToolbar_HighlighterColor;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.PenSize":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "PenSize", "Windows.Foundation.Size");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_InkToolbar_PenSize;
                xamlMember.Setter = set_22_InkToolbar_PenSize;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.PressedButtonForeground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "PressedButtonForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_InkToolbar_PressedButtonForeground;
                xamlMember.Setter = set_23_InkToolbar_PressedButtonForeground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.PointerOverButtonForeground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "PointerOverButtonForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_InkToolbar_PointerOverButtonForeground;
                xamlMember.Setter = set_24_InkToolbar_PointerOverButtonForeground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.SelectedButtonForeground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "SelectedButtonForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_InkToolbar_SelectedButtonForeground;
                xamlMember.Setter = set_25_InkToolbar_SelectedButtonForeground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.ButtonIconFill":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "ButtonIconFill", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_InkToolbar_ButtonIconFill;
                xamlMember.Setter = set_26_InkToolbar_ButtonIconFill;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.ButtonForeground":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "ButtonForeground", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_InkToolbar_ButtonForeground;
                xamlMember.Setter = set_27_InkToolbar_ButtonForeground;
                break;
            case "Microsoft.Labs.InkToolbarControl.InkToolbar.ActiveTool":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Labs.InkToolbarControl.InkToolbar");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "ActiveTool", "Microsoft.Labs.InkToolbarControl.InkToolbarTool");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_InkToolbar_ActiveTool;
                xamlMember.Setter = set_28_InkToolbar_ActiveTool;
                break;
            case "Windows.UI.Color.A":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_29_Color_A;
                xamlMember.Setter = set_29_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_30_Color_B;
                xamlMember.Setter = set_30_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_31_Color_G;
                xamlMember.Setter = set_31_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_32_Color_R;
                xamlMember.Setter = set_32_Color_R;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlSystemBaseType
    {
        global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::UWPToolkit.UWPToolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

